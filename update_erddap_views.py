"""
This module generate some of the ERDDAP views for the ERDDAP server.

The views are generated by querying the database for the latest data and tables available
and then generating the ERDDAP views and tables based on the data.
"""

from pathlib import Path
import re

import click
from jinja2 import Environment, FileSystemLoader
from sqlalchemy import create_engine, text
from dotenv import load_dotenv

load_dotenv()

environment = Environment(loader=FileSystemLoader("views"))

def get_db_connection(db_host, db_name, db_port, db_user, db_password):
    """
    Get a connection to the database
    """
    return create_engine(
        f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
    )

def get_sn_sa_tables(engine) -> list:
    """
    Get the sentinel and nearshore views from the database
    """
    with engine.connect() as connection:
        # Get all the tables available within the sn_sa schema
        tables = connection.execute(
            text(
                "SELECT table_name FROM information_schema.tables WHERE table_schema = 'sn_sa';"
            )
        ).fetchall()

    return [table[0] for table in tables]


def generate_nearshore_view(tables):
    """
    Generate the nearshore view for the ERDDAP server
    """
    ns_tables = [table for table in tables if table.startswith("ns_") and table.endswith("_raw")]
    result = environment.get_template("HakaiNearshoreTemperature.sql.j2").render(tables=ns_tables)
    Path("views/HakaiNearshoreTemperature.sql").write_text(result)


def generate_50_watershed_view(tables):
    """
    Generate the 50 watershed view for the ERDDAP server
    """
    ws_tables = [table for table in tables if table.startswith("w50_") and table.endswith("_raw")]
    water_temp_tables = [table for table in ws_tables if re.search("_t\d+_raw",table)] 
    result = environment.get_template("Hakai50WatershedStreams.sql.j2").render(tables=water_temp_tables)
    Path("views/Hakai50WatershedStreams.sql").write_text(result)

    air_temp_tables = [table for table in ws_tables if re.search("_tair_raw",table)] 
    result = environment.get_template("Hakai50WatershedAir.sql.j2").render(tables=air_temp_tables)
    
    Path("views/Hakai50WatershedAir.sql").write_text(result)



def generate_sentinel_view(tables):
    """
    Generate the sentinel view for the ERDDAP server
    """
    sentinel_tables = [table for table in tables if table.startswith("sentinel_") and table.endswith("_raw")]
    result = environment.get_template("HakaiSentinelTemperature.sql.j2").render(
        tables=sentinel_tables
    )
    Path("views/HakaiSentinelTemperature.sql").write_text(result)


@click.command()
@click.option("--db_user", help="The database user", envvar="DB_USER")
@click.option("--db_password", help="The database password", envvar="DB_PASSWORD")
@click.option("--db_host", help="The database host", envvar="DB_HOST", default="db.hakai.org")
@click.option("--db_name", help="The database name", envvar="DB_NAME", default="hakai")
@click.option("--db_port", help="The database port", envvar="DB_PORT", default=5432)
@click.option("--erddap-db-url", help="The ERDDAP database URL", envvar="ERDDAP_SECRET_hakai_erddap_sourceUrl")
def main( db_user, db_password,db_host, db_name, db_port,erddap_db_url):
    """
    Update the ERDDAP views
    """
    if db_user and db_password:
        engine = get_db_connection(db_host, db_name, db_port, db_user, db_password)
    else:
        db_url = erddap_db_url.replace("jdbc:",'').replace("&amp;",'&')
        click.echo(f"Connecting to {db_url}")
        engine = create_engine(db_url)

    tables = get_sn_sa_tables(engine)
    if not tables:
        raise ValueError("No tables found in the database")

    click.echo(f"Tables found: {tables}")

    generate_nearshore_view(tables)
    generate_50_watershed_view(tables)
    generate_sentinel_view(tables)


if __name__ == "__main__":
    main()
